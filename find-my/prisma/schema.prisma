// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures=["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity="prisma"
}

model User {
  id Int @id @default(autoincrement())
  name String
  phone String? @unique
  email String @unique
  password  String
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  losts Lost[]
  Comments Comment[]
  reComments ReComment[]
  scrap Scrap[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

//views 기능 추가 필요
//lostPlace string 고치기 
model Lost{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  userId Int
  photos LostPhoto[]
  title String
  lostPlace String
  description String  @db.MediumText
  comments Comment[]
  reComments ReComment[]
  category String
  views Int
  scraps Scrap[]
 
}


model Scrap {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  lost      Lost     @relation(fields: [lostId], references: [id],onDelete: Cascade)
  lostId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model LostPhoto {
  id        Int       @id @default(autoincrement())
  lost      Lost      @relation(fields: [lostId], references: [id],onDelete: Cascade)
  lostId    Int
  file      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  lost      Lost      @relation(fields: [lostId], references: [id],onDelete: Cascade)
  lostId    Int
  content String    @db.MediumText
  reComment ReComment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReComment{
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  lost      Lost     @relation(fields: [lostId], references: [id],onDelete: Cascade)
  lostId    Int
  comment    Comment     @relation(fields: [commentId], references: [id])
  commentId    Int
  content String    @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
